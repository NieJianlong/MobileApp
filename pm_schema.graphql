"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Address {
  id: ID!
  flat: String
  floor: String
  block: String
  building: String
  houseNumber: String
  streetAddress1: String
  streetAddress2: String
  townCity: String
  villageArea: String
  district: String
  provinceState: String
  country: String
  areaCode: String
  landMark: String
  pinCode: String
  addressType: String
  referenceId: String
  defaultAddress: Boolean
}

type Announcement {
  id: ID!
  referenceId: String
  validityInterval: Int
  announcementText: String
  announcementDatetime: DateTime
}

type AnnouncementDTO {
  announcementText: String
  validityInterval: Int
  announcementDatetime: DateTime
  productLongName: String
  sellerBusinessName: String
  retailPrice: Float
  wholeSalePrice: Float
  percentageOff: Float
  deliveryDate: Date
  minOrderRequired: Int
  infoIcon: String
}

type Buyer {
  id: ID!
}

type Category {
  id: ID!
  name: String
  description: String
  parentCategory: Category
}

type CategoryView {
  categoryId: ID
  name: String
  description: String
}

type Chat {
  id: ID!
}

scalar Date

"""scalars"""
scalar DateTime

"""inputs"""
input FilterParams {
  latitude: Float
  longitude: Float
  category: String
  listingId: String
  storeId: String
  sellerId: String
  buyerId: String
  textToSearch: String
}

enum FilterType {
  UNDEFINED
  ALL
  ACTIVE
  ACTIVE_BY_COORDINATES
  ACTIVE_BY_COORDINATES_AND_ANNOUNCEMENT
  ACTIVE_BY_COORDINATES_AND_CATEGORY
  ACTIVE_BY_COORDINATES_AND_SELLER
  BY_LISTING_ID
  BY_STORE_ID
  ACTIVE_BY_COORDINATES_AND_WISH_LIST
  ACTIVE_BY_COORDINATES_AND_FULL_TEXT_SEARCH
  BY_COORDINATES_AND_SHARE_LIST
  BY_SELLER
}

type Images {
  id: ID!
  referenceId: String
  imageName: String
  imageType: String
  description: String
  fullPath: String
}

type KeyValuePair {
  key: String!
  value: String!
}

type ListingVariantView {
  listingId: ID!
  variantId: ID!
  productId: ID
  defaultVariant: Boolean
  retailPrice: Float
  wholeSalePrice: Float
  fullPath: String
  itemsInStock: Int
  options: [KeyValuePair]
}

"""
  mutations
Mutation: to add products
"""
type Mutation {
  """
    this query will add product listing based on product listing request .
     Fields : productId : String!,   storeId: String,  chatId: String,
  announcementId: String,    addressId: String, chatMuteFlag: Boolean
    numberOfItems: Int, maxQuantityPerCart: Int, wholeSalePrice: Float,
  retailPrice: Float, discount: Float, closedDate: Date,deliveryDate: Date,
  pickupFromSeller: Boolean
  {
  "productListingRequest": {
    "productId": "d0c25217-6d68-4ccc-a404-d90d5c13e1e9",
    "storeId": "0b950a80-7836-45b4-9ee3-42042097aafe",
    "chatId": "",
    "announcementId": "",
    "returnAddressId": "fc2eb415-7f57-4f09-8fdc-2a885579e179",
    "collectionPointAddressId": "b105be7f-693d-41bb-a727-b301e813096a",
    "chatMuteFlag": true,
   "numberOfItems": 60,
    "minQuantityPerCart": 0,
    "maxQuantityPerCart": 0,
    "wholeSalePrice": "40",
    "retailPrice": "50",
    "discount": "60",
   "closedDate": "2021-06-06",
   "deliveryDate": "2021-06-01",
   "pickupFromSeller": true,
    "productListingType": "MAIN_PRODUCT_LISTING"
  }
  }
  """
  addProductListing(productListingRequest: ProductListingRequest): ProductListing

  """
   this query will add announcement based on product id , validity interval ( how
  many seconds to be valid ) , announcement  text
   , announcementDatetime: DateTime
  createdAt: DateTime, updatedAt: DateTime - will remove these parameters at next refactoring
  """
  addAnnouncement(productId: String, validityInterval: Int, announcementText: String, announcementDatetime: DateTime, createdAt: DateTime, updatedAt: DateTime): Announcement!

  """
  add Parent category should add a main category that can have sub-categories
  Parameters : name type String , description type string
  Response : Category type,  id: ID!, name: String,   description: String, 
  parentCategory: Category,  createdAt: DateTime, updatedAt: DateTime,
  subCategories: [Category]
  {
    "name": "parent 2 Category",
     "description": "this is parent 2 Category"
    }
  """
  addParentCategory(name: String, description: String): Category!

  """
  add sub category - is a category that has a parent category
  Parameters: name type String, description type String , parent category Id type String
  Response: the Category type
   {
     "categoryId": "ac664456-043b-4345-a8fd-19a9b467d64c",
     "name": "sub category",
    "description": "this is sub category",
     "parentCategoryId": "cc19bd1d-60f2-4773-acd4-873ad77698e0"
   }
  """
  addSubCategory(name: String, description: String, parentCategoryId: String): Category!

  """
  add product to wish list - product
  Parameters: product Id type String , buyer id type String
  Response: the Whishlist type
  """
  addProductToWishlist(productId: String!, buyerId: String!): Wishlist!

  """
  add review dto  - add review for a product
  Parameters: product id type String, description type String ,  productId type String, sellerId type String
  imagesList type list of String ( the list with paths for product images)
  Response: ProductReviewView type
  """
  addProductReview(productId: String, title: String!, description: String!, ratingVote: Int!, sellerId: String, postedBy: String!): ProductReviewView!

  """
  add review report
  Parameters: reviewId type String, postedBy type String , description type String, reason type String
  Response: ReportReviewView type
  """
  addReportReview(reviewId: String!, title: String!, description: String!, reason: String!, reporterType: ReporterType!, postedBy: String!): ReportReviewView

  """
  add product options for product
  Parameters: productId type String, productListingId type String, name of the
  option type String, description for option type String
  Response: ProductOptions type
  addProductOptionsForProduct( productId: String, productListingId: String,
  name: String, description: String): ProductOptions
  add request for product to be present in a specific online store
  Parameters: productId type String , storeId type String, requests - total number of requests  type Integer
  Response: ProductRequestCount
  """
  addRequestForProduct(productId: String, storeId: String, requests: Int): ProductRequestCount

  """
  add share information about a product
  Parameters: productId type String, buyerId type String, share title - the
  title of the share - type String, target Email Address type String
  productPageUrl type String
  Response: the ShareInformation type
  """
  addShareInformation(productId: String, buyerId: String, shareTitle: String, targetEmailAddress: String, shareChannel: String, productPageUrl: String): ShareInformation
  createStoreByName(storeInput: StoreInput!): Store
  updateStoreByName(storeName: String!, storeInput: StoreInput!): Store

  """
  increment helpful count in reviews table
  @param reviewId
  @return the value already incremented
  """
  incrementHelpfulCount(reviewId: String!): Int

  """
  images sent as form fields "fileNNN" with type "file"
  productInput sent as the field "operations"
  in multipart/form-data
  """
  createProductGeneral(productInput: ProductInputStep1!): ProductStep1Response!
  updateProductGeneral(productInput: ProductUpdateStep1!): ProductStep1Response!
  savePreferredCategories(buyerId: ID!, categories: [ID]): String
}

enum OnlineStoreType {
  UNDEFINED
  MAIN_ONLINE_STORE
  ANNOUNCEMENT_ONLINE_STORE
}

"""types"""
type Product {
  id: ID!
  shortName: String
  longName: String
  description: String
}

type ProductCategoryView {
  categoryId: ID
  productId: ID
  name: String
  description: String
}

input ProductInputStep1 {
  shortName: String!
  longName: String
  description: String
  categoryId: String
  vendor: String
  brand: String
  keywords: [String]
  highlightBullets: [String]
}

type ProductListing {
  id: ID!
  product: Product
  store: Store
  chat: Chat
  announcement: Announcement
  returnAddress: Address
  chatMuteFlag: Boolean
  numberOfItems: Int
  maxQuantityPerCart: Int
  closedDate: Date
  deliveryDate: Date
  collectionPointAddress: Address
  shippingMethodsAvailable: [ShippingMethodType]
}

input ProductListingRequest {
  productId: String!
  storeId: String
  chatId: String
  announcementId: String
  returnAddressId: String
  collectionPointAddressId: String
  chatMuteFlag: Boolean
  numberOfItems: Int
  minQuantityPerCart: Int
  maxQuantityPerCart: Int
  wholeSalePrice: Float
  retailPrice: Float
  discount: Float
  closedDate: Date
  deliveryDate: Date
  pickupFromSeller: Boolean
  productListingType: ProductListingType
  shippingMethodsAvailable: [ShippingMethodType]
}

"""
 Product listing schema
enums
"""
enum ProductListingType {
  UNDEFINED
  MAIN_PRODUCT_LISTING
  ANNOUNCEMENT_PRODUCT_LISTING
}

type ProductListingView {
  id: String
  productId: String
  numberOfReviews: Int
  rating: Int
  closedDate: String
  deliveryDate: String
  productListingType: String
  shippingMethodsAvailable: String
  noOfOrderedItems: Int
  progressBarValue: Int
  noOfItemsInStock: Int
  numberOfItemsAvailable: Int
  minQuantityPerCart: Int
  maxQuantityPerCart: Int
  pickUpFromSeller: Boolean
  collectionPointAddressId: String
  collectionPointAddress: Address
  returnAddressId: String
  returnAddress: Address
  amountSaved: Float
  deliveryFee: Float
  shortName: String
  longName: String
  description: String
  technicalDetails: String
  highlightBullets: String
  ratingDetail: RatingDetail
  announcementId: String
  relatedProducts: String
  sellerId: String
  seller: SellerView
  reviews: [ReviewView]
  returnPolicies: [ProductReturnPolicyView]
  categories: [ProductCategoryView]
  images: [Images]
  listingVariants: [ListingVariantView]
  retailPrice: Float
  wholeSalePrice: Float
  percentOff: Int
  photo: String
  photoUrls: [String]
}

type ProductRequestCount {
  product: Product
  store: Store
  requestsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductReturnPolicyView {
  id: ID
  productId: ID
  name: String
  description: String
}

type ProductReviewView {
  id: ID!
  buyerName: String
  title: String
  description: String
  ratingVote: Int
}

enum ProductStatus {
  UNDEFINED
  DRAFT
  HIDDEN
  ACTIVE
  SUSPENDED
  CLOSED
  RETIRED
  DELETED
}

type ProductStep1Response {
  productId: ID!
}

input ProductUpdateStep1 {
  productId: ID!
  productStatus: ProductStatus!
  shortName: String!
  longName: String
  description: String
  categories: [String]

  """id array"""
  vendor: String
  brand: String
  keywords: [String]
  highlightBullets: [String]
}

type ProductView {
  productId: ID
  sellerId: ID
  vendorSku: String
  sellerSku: String
  shortName: String
  longName: String
  description: String
  brand: String
  photo: String
  itemsInStock: Int
  highlightBullets: String
  warrantyDetails: String
  productType: String
  productStatus: String
  priceId: String
  currency: String
  retailPrice: Float
  wholeSalePrice: Float
  salePercentage: Float
  totalQuantityPrice: Float
  taxPercentage: Float
  categories: [ProductCategoryView]
  variants: [Variant]
}

"""
  queries
The Root Query for the application
"""
type Query {
  """getProductByProductId if product belongs to caller"""
  getProductByProductId(productId: String!): ProductView!

  """
  get product by id
  Parameters: id type String
  Response: the Product type
  """
  productById(id: String!): Product

  """
  get store by id
  Parameters: id type String
  Response: the Store type
  """
  store(id: ID!): Store!

  """
  get store by name
  Parameters: name type String
  Response: the Store type
  """
  getStoreByName(name: String!): Store!

  """
  get chat by id
  Parameters: id type String
  Response: the Chat type
  """
  chatById(id: String!): Chat

  """
  get share information by product id
  Parameters: the product id type String
  Response: the ShareInformation type
  """
  getShareInformationByProductId(productId: String): [ShareInformation]

  """
  get announcements by store id
  Parameters: the store id type String
  Response: the Announcement type
  """
  announcementsByOnlineStore(storeId: String): [Announcement]

  """
  get productlisting by delivery geo point or other filter
  It founds strores with area containing the delivery point
  and then product listings for that stores
  Parameters: geo point, searchOptions
  Response: the ProductListing type
  """
  getListings(searchOptions: SearchOptions): [ProductListingView]
  getProducts(searchOptions: SearchOptions): [ProductView]

  """get stores with area containing given point"""
  onlineStoreByGeoCoordinates(latitude: Float!, longitude: Float!): [Store]

  """
  get announcements by product listing id
  Parameters: the product listing id type String
  Response: the Announcement DTO type
  {
   "productListingId": "f968e892-328a-450d-9b2b-0d7604152c85"
  }
  """
  announcementsByListingId(productListingId: String): [AnnouncementDTO]
  getAllCategories: [CategoryView]!
  getPreferredCategories(buyerId: ID!): [CategoryView]!
}

type RatingDetail {
  zeroStar: Int
  oneStar: Int
  twoStar: Int
  threeStar: Int
  fourStar: Int
  fiveStar: Int
  sixAndMoreStar: Int
}

enum ReporterType {
  UNDEFINED
  BUYER
  SELLER
}

type ReportReviewView {
  reviewId: String
  title: String
  description: String
  postedById: String
}

type ReviewView {
  id: ID
  productId: ID
  sellerId: ID
  title: String
  description: String
  ratingVote: Int
  helpfulCount: Int
  postedBy: ID
}

input SearchOptions {
  filter: FilterType

  """default ALL"""
  filterParams: FilterParams

  """default new FilterParams()"""
  sortBy: SortType

  """default DATE"""
  sortDirection: SortDirection

  """default DESCENDING"""
  pageNo: Int

  """default 1"""
  pageSize: Int
}

type SellerView {
  id: ID
  brandName: String
  avatarUrl: String
  usersRating: Float
  name: String
  description: String
  ratingCount: Float
}

type ShareInformation {
  id: ID!
  product: Product
  buyer: Buyer
  createdAt: DateTime
  updatedAt: DateTime
  targetEmailAddress: String
  shareChannel: String
  productPageUrl: String
  shareTitle: String
}

enum ShippingMethodType {
  UNDEFINED
  DELIVERY_ADDRESS
  COLLECTION_POINT
}

enum SortDirection {
  UNDEFINED
  ASCENDING
  DESCENDING
}

enum SortType {
  UNDEFINED
  DATE
  PRICE
  RATING
}

type Store {
  id: ID!
  name: String
  description: String
  city: String
  provinceState: String
  createdBy: ID
  onlineStoreType: OnlineStoreType
  area: String
}

input StoreInput {
  name: String
  description: String
  city: String
  provinceState: String
  onlineStoreType: OnlineStoreType
  createdBy: ID
  area: String
}

type Variant {
  variantId: ID!
  productId: ID!
  defaultVariant: Boolean
  retailPrice: Float
  wholeSalePrice: Float
  fullPath: String
  itemsInStock: Int
  options: [KeyValuePair]
}

type Wishlist {
  id: ID!
  product: Product
  buyer: Buyer
}

