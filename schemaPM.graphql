"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Address {
  id: ID!
  flat: String
  floor: String
  block: String
  building: String
  houseNumber: String
  streetAddress1: String
  streetAddress2: String
  townCity: String
  villageArea: String
  district: String
  provinceState: String
  country: String
  areaCode: String
  landMark: String
  pinCode: String
  addressType: String
  referenceId: String
  defaultAddress: Boolean
}

type Announcement {
  id: ID!
  referenceId: String
  validityInterval: Int
  announcementText: String
  announcementDatetime: DateTime
}

type AnnouncementDTO {
  announcementText: String
  validityInterval: Int
  announcementDatetime: DateTime
  productLongName: String
  sellerBusinessName: String
  retailPrice: Float
  wholeSalePrice: Float
  percentageOff: Float
  deliveryDate: Date
  minOrderRequired: Int
  infoIcon: String
}

input AnnouncementInput {
  listingId: String!
  announcementText: String!
  validityInterval: Int!
  announcementDate: DateTime!
}

type Buyer {
  id: ID!
}

type Category {
  id: ID!
  name: String
  description: String
  parentCategory: Category
}

type CategoryView {
  categoryId: ID
  name: String
  description: String
}

type Chat {
  id: ID!
}

input CollectionPointInput {
  listingId: String!
  streetAddress1: String!
  streetAddress2: String
  townCity: String!
  country: String!
  provinceState: String!
  areaCode: String!
  openingHours: [String]
}

type CourierDeliveryDetails {
  courierDeliveryId: ID!
  courierName: String
  shippingFees: Float
  shippingFeesTaxes: Float
}

input CourierDeliveryDetailsInput {
  listingId: String!
  courierName: String!
  shippingFees: Float
  shippingFeesTaxes: Float
}

scalar Date

"""scalars"""
scalar DateTime

"""inputs"""
input FilterParams {
  latitude: Float
  longitude: Float
  category: String
  listingId: String
  storeId: String
  sellerId: String
  buyerId: String
  textToSearch: String
}

enum FilterType {
  UNDEFINED
  ALL
  ACTIVE
  ACTIVE_BY_COORDINATES
  ACTIVE_BY_COORDINATES_AND_ANNOUNCEMENT
  ACTIVE_BY_COORDINATES_AND_CATEGORY
  ACTIVE_BY_COORDINATES_AND_SELLER
  BY_LISTING_ID
  BY_STORE_ID
  ACTIVE_BY_COORDINATES_AND_WISH_LIST
  ACTIVE_BY_COORDINATES_AND_FULL_TEXT_SEARCH
  BY_COORDINATES_AND_SHARE_LIST
  BY_SELLER
}

type Images {
  id: ID!
  referenceId: String
  imageName: String
  imageType: String
  description: String
  fullPath: String
}

type KeyValuePair {
  key: String!
  value: String!
}

input ListingStatusInput {
  listingId: String!
  status: ProductListingStatus!
}

input ListingVariantInput {
  variantId: String
  priceId: String!
  quantity: Int!
}

type ListingVariantView {
  listingId: ID!
  variantId: ID!
  productId: ID
  defaultVariant: Boolean
  retailPrice: Float
  wholeSalePrice: Float
  fullPath: String
  itemsInStock: Int
  itemsAvailable: Int
  itemsSold: Int
  options: [KeyValuePair]
}

"""mutations"""
type Mutation {
  """this query will add product listing based on product listing request ."""
  addProductListing(productListingInput: ProductListingInput): ProductListing
  addAnnouncement(productId: String, validityInterval: Int, announcementText: String, announcementDatetime: DateTime, createdAt: DateTime, updatedAt: DateTime): Announcement!

  """
  add Parent category should add a main category that can have sub-categories
  """
  addParentCategory(name: String, description: String): Category!

  """add sub category - is a category that has a parent category"""
  addSubCategory(name: String, description: String, parentCategoryId: String): Category!

  """add product to wish list - product"""
  addProductToWishlist(productId: String!, buyerId: String!): Wishlist!
  deleteProductFromWishlist(productId: String!, buyerId: String!): Int!

  """add review dto  - add review for a product"""
  addProductReview(productId: String, title: String!, description: String!, ratingVote: Int!, sellerId: String, postedBy: String!): ProductReviewView!

  """add review report"""
  addReportReview(reviewId: String!, title: String!, description: String!, reason: String!, reporterType: ReporterType!, postedBy: String!): ReportReviewView

  """
  add product options for product
  addProductOptionsForProduct( productId: String, productListingId: String,
  name: String, description: String): ProductOptions
  add request for product to be present in a specific online store
  """
  addRequestForProduct(productId: String, storeId: String, requests: Int): ProductRequestCount

  """add share information about a product"""
  addShareInformation(productId: String, buyerId: String, shareTitle: String, targetEmailAddress: String, shareChannel: String, productPageUrl: String): ShareInformation
  deleteProduct(productId: String!): Boolean
  createStoreByName(storeInput: StoreInput!): Store
  updateStoreByName(storeName: String!, storeInput: StoreInput!): Store
  incrementHelpfulCount(reviewId: String!): Int
  createProductGeneral(productInput: ProductInputStep1!): ProductStep1Response!
  updateProductGeneral(productInput: ProductUpdateStep1!): ProductStep1Response!
  createProductStockAndPricing(productInput: ProductInputStep2!): Product!
  createProductReturnPolicy(productInput: ProductInputStep3!): Product!
  savePreferredCategories(buyerId: ID!, categories: [ID]): String
  updateProductListing(productListingUpdateInput: ProductListingUpdateInput): ProductListing
  addProductListingVariants(productListingVariantInput: ProductListingVariantInput): [ProductListingVariant]
  updateListingStatus(listingStatusInput: ListingStatusInput): ProductListing
  updateProductStatus(productStatusInput: ProductStatusInput): Product
  deleteProductListing(listingId: String!): Boolean
  cloneListing(listingId: String!): ProductListing
  addListingCollectionPoint(collectionPointInput: CollectionPointInput): Address
  addListingAnnouncement(announcementInput: AnnouncementInput): Announcement
  addListingCourierDeliveryDetails(courierDeliveryInput: CourierDeliveryDetailsInput): CourierDeliveryDetails
  createOption(option: OptionInput): Option
  deleteOption(optionId: String!): Boolean
}

enum OnlineStoreType {
  UNDEFINED
  MAIN_ONLINE_STORE
  ANNOUNCEMENT_ONLINE_STORE
}

type Option {
  optionId: ID!
  name: String
  description: String
  values: [OptionValue]
}

input OptionInput {
  name: String!
  description: String
  values: [String]!
}

type OptionValue {
  valueId: ID!
  value: String
}

input OptionValueInput {
  name: String!
  value: String!
}

type PolicyNameView {
  name: String
}

type Price {
  id: ID!
  currency: String
  retailPrice: Float
  wholeSalePrice: Float
  salePercentage: Float
  totalQuantityPrice: Float
  taxPercentage: Float
}

"""types"""
type Product {
  id: ID!
  shortName: String
  longName: String
  description: String
}

type ProductCategoryView {
  categoryId: ID
  productId: ID
  name: String
  description: String
}

input ProductInputStep1 {
  shortName: String!
  longName: String
  description: String
  categoryId: String
  vendor: String
  brand: String
  technicalDetails: String
  keywords: [String]
  highlightBullets: [String]
}

input ProductInputStep2 {
  productId: ID!
  sellerSku: String
  retailPrice: Float!
  wholeSalePrice: Float!
  profit: Float
  currency: String!
  weight: Float
  weightUnit: String
  size: String
  sizeUnit: String
  itemsInStock: Int!
  variantInputs: [ProductVariantInput]
}

input ProductInputStep3 {
  productId: ID!
  returnPolicyInputs: [ReturnPolicyInput]!
}

type ProductListing {
  id: ID!
  product: Product
  store: Store
  chat: Chat
  announcement: Announcement
  chatMuteFlag: Boolean
  numberOfItems: Int
  maxQuantityPerCart: Int
  closedDate: Date
  deliveryDate: Date
  productListingStatus: ProductListingStatus
  minSoldQuantity: Int
  openUntil: Date
  startDate: DateTime
}

input ProductListingInput {
  productId: String!
  storeId: String
  chatId: String
  announcementId: String
  chatMuteFlag: Boolean
  numberOfItems: Int
  minQuantityPerCart: Int
  maxQuantityPerCart: Int
  pickupFromSeller: Boolean
  productListingType: ProductListingType
  openUntil: Date
  minSoldQuantity: Int
  startDate: DateTime
}

enum ProductListingStatus {
  UNDEFINED
  DRAFT
  HIDDEN
  OPEN
  SUSPENDED
  CLOSED
  RETIRED
  ACTIVE
}

"""
 Product listing schema
enums
"""
enum ProductListingType {
  UNDEFINED
  MAIN_PRODUCT_LISTING
  ANNOUNCEMENT_PRODUCT_LISTING
}

input ProductListingUpdateInput {
  listingId: String!
  productId: String!
  storeId: String
  chatId: String
  announcementId: String
  chatMuteFlag: Boolean
  numberOfItems: Int
  minQuantityPerCart: Int
  maxQuantityPerCart: Int
  pickupFromSeller: Boolean
  productListingType: ProductListingType
  openUntil: Date
  minSoldQuantity: Int
  startDate: DateTime
}

type ProductListingVariant {
  productListing: ProductListing!
  variantId: ID
  productId: ID!
  price: Price
  itemsAvailable: Int
  itemsSold: Int
}

input ProductListingVariantInput {
  listingId: String!
  variants: [ListingVariantInput]!
}

type ProductListingView {
  photo: String
  photoUrls: [String]
  shortName: String
  numberOfStars: Float
  numberOfReviews: Int
  retailPrice: Float
  wholeSalePrice: Float
  salePercentage: Float
  percentOff: Int
  deliveryFee: Float
  amountSaved: Float
  pickUpFromSeller: Boolean
  openUntil: String
  noOfOrderedItems: Int
  noOfItemsInStock: Int
  description: String
  technicalDetails: String
  highlightBullets: String
  seller: SellerView
  returnPolicies: [ProductReturnPolicyView]
  listingVariants: [ListingVariantView]
  relatedProducts: String
  reviews: [ReviewView]
  listingId: String
  productId: String
  storeId: String
  storeName: String
  status: String
  rating: Int
  closedDate: String
  deliveryDate: String
  productListingType: String
  shippingMethodsAvailable: String
  progressBarValue: Int
  numberOfItemsAvailable: Int
  minQuantityPerCart: Int
  maxQuantityPerCart: Int
  qtyAvailable: Int
  minSoldQuantity: Int
  itemSold: Int
  createOn: String
  collectionPointAddressId: String
  collectionPointAddress: Address
  returnAddressId: String
  returnAddress: Address
  longName: String
  ratingDetail: RatingDetail
  announcementId: String
  sellerId: String
  categories: [ProductCategoryView]
  images: [Images]
}

type ProductRequestCount {
  product: Product
  store: Store
  requestsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductReturnPolicyView {
  id: ID
  productId: ID
  name: String
  description: String
  value: String
}

type ProductReviewView {
  id: ID!
  buyerName: String
  title: String
  description: String
  ratingVote: Int
}

enum ProductStatus {
  UNDEFINED
  DRAFT
  HIDDEN
  ACTIVE
  SUSPENDED
  CLOSED
  RETIRED
  DELETED
}

input ProductStatusInput {
  productId: ID!
  productStatus: ProductStatus
}

type ProductStep1Response {
  productId: ID!
}

enum ProductType {
  UNDEFINED
  DONT_USE_ME_1
  DONT_USE_ME_2
}

input ProductUpdateStep1 {
  productId: ID!
  productStatus: ProductStatus!
  shortName: String!
  longName: String
  description: String
  categories: [String]

  """id array"""
  vendor: String
  brand: String
  keywords: [String]
  highlightBullets: [String]
}

input ProductVariantInput {
  sellerSku: String
  retailPrice: Float!
  wholeSalePrice: Float!
  itemsInStock: Int!
  defaultVariant: Boolean!
  options: [OptionValueInput]
}

type ProductVariantView {
  variantId: ID
  productId: ID
  retailPrice: Float
  wholeSalePrice: Float
  fullPath: String
  itemsInStock: Int
  defaultVariant: Boolean
  options: [KeyValuePair]
}

type ProductView {
  productId: ID
  sellerId: ID
  sellerAddress: String
  vendorSku: String
  sellerSku: String
  shortName: String
  longName: String
  description: String
  brand: String
  photo: String
  itemsInStock: Int
  highlightBullets: String
  technicalDetails: String
  warrantyDetails: String
  productType: String
  productStatus: String
  priceId: String
  currency: String
  retailPrice: Float
  wholeSalePrice: Float
  salePercentage: Float
  totalQuantityPrice: Float
  taxPercentage: Float
  numberOfStars: Float
  numberOfReviews: Int
  totalNumberOfStars: Int
  variants: [ProductVariantView]
  productReturnPolicyViews: [ProductReturnPolicyView]
  reviews: [ReviewView]
  categories: [ProductCategoryView]
  images: [Images]
  ratingDetail: RatingDetail
}

"""queries"""
type Query {
  getProductByProductId(productId: String!): ProductView!
  getStores: [Store]
  store(id: ID!): Store!
  getStoreByName(name: String!): Store!
  chatById(id: String!): Chat
  getShareInformationByProductId(productId: String): [ShareInformation]
  announcementsByOnlineStore(storeId: String): [Announcement]
  getListings(searchOptions: SearchOptions): [ProductListingView]
  getListingNeedAcceptOrReject: [ProductListingView]
  getSellerListingGroupByProduct(options: SellerFilterOptions): SellerListingGroupResponse
  getSellerListing(productId: String, options: SellerFilterOptions): SellerListingResponse
  getSellerListingStores: [SellerListingStoreView]
  getProducts(searchOptions: SearchOptions): [ProductView]
  onlineStoreByGeoCoordinates(latitude: Float!, longitude: Float!): [Store]
  announcementsByListingId(productListingId: String): [AnnouncementDTO]
  getAllCategories: [CategoryView]!
  getPreferredCategories(buyerId: ID!): [CategoryView]!
  getOptionReference: [Option]!
  getPolicyNames: [PolicyNameView]!
  getRelatedProducts(productId: ID!): [ProductView]
  isProductInWishlist(productId: String!, buyerId: String!): Boolean!
}

type RatingDetail {
  zeroStar: Int
  oneStar: Int
  twoStar: Int
  threeStar: Int
  fourStar: Int
  fiveStar: Int
  sixAndMoreStar: Int
}

enum ReporterType {
  UNDEFINED
  BUYER
  SELLER
}

type ReportReviewView {
  reviewId: String
  title: String
  description: String
  postedById: String
}

input ReturnPolicyInput {
  name: String!
  value: String!
}

type ReviewView {
  id: ID
  productId: ID
  sellerId: ID
  title: String
  description: String
  ratingVote: Int
  helpfulCount: Int
  postedBy: ID
}

input SearchOptions {
  filter: FilterType

  """default ALL"""
  filterParams: FilterParams

  """default new FilterParams()"""
  sortBy: SortType

  """default DATE"""
  sortDirection: SortDirection

  """default DESCENDING"""
  pageNo: Int

  """default 1"""
  pageSize: Int
}

enum SellerDateFilter {
  LAST_7_DAYS
  LAST_30_DAYS
}

input SellerFilterOptions {
  filterType: SellerFilterType!
  dateFilterValue: SellerDateFilter
  productTypeFilterValue: ProductType
  storeFilterValues: [String]
  pageOption: SellerPageOption!
}

enum SellerFilterType {
  NONE
  START_DATE
  PRODUCT_TYPE
  STORE
  START_DATE_AND_PRODUCT_TYPE
  START_DATE_AND_STORE
  PRODUCT_TYPE_AND_STORE
  START_DATE_AND_PRODUCT_TYPE_AND_STORE
}

type SellerListingGroupResponse {
  content: [SellerListingGroupView]
  pageNo: Int
  pageSize: Int
  totalPages: Int
  totalElements: Int
}

type SellerListingGroupView {
  productId: ID
  shortName: String
  ended: Int
  active: Int
  total: Int
}

type SellerListingResponse {
  content: [SellerListingView]
  pageNo: Int
  pageSize: Int
  totalPages: Int
  totalElements: Int
}

type SellerListingStoreView {
  storeId: ID
  storeName: String
}

type SellerListingView {
  listingId: ID
  productId: ID
  shortName: String
  mainPhotoUrl: String
  startDate: DateTime
  closedDate: Date
  openUntil: Date
  minSoldQuantity: Int
  daysLeft: Int
  totalItemsAvailable: Int
  totalItemsSold: Int
  storeId: ID
  storeName: String
  priceId: ID
  wholeSalePrice: Float
  retailPrice: Float
  salePercentage: Float
  categories: [String]
}

input SellerPageOption {
  pageNumber: Int!
  pageSize: Int!
}

type SellerView {
  id: ID
  brandName: String
  avatarUrl: String
  usersRating: Float
  name: String
  description: String
  ratingCount: Float
}

type ShareInformation {
  id: ID!
  product: Product
  buyer: Buyer
  createdAt: DateTime
  updatedAt: DateTime
  targetEmailAddress: String
  shareChannel: String
  productPageUrl: String
  shareTitle: String
}

enum SortDirection {
  UNDEFINED
  ASCENDING
  DESCENDING
}

enum SortType {
  UNDEFINED
  DATE
  PRICE
  RATING
}

type Store {
  id: ID!
  name: String
  description: String
  city: String
  provinceState: String
  createdBy: ID
  onlineStoreType: OnlineStoreType
  area: String
}

input StoreInput {
  name: String
  description: String
  city: String
  provinceState: String
  onlineStoreType: OnlineStoreType
  createdBy: ID
  area: String
}

type Wishlist {
  id: ID!
  product: Product
  buyer: Buyer
}

