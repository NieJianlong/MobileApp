"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input AddressRequest {
  addressId: ID!
  flat: String
  floor: String
  defaultAddress: Boolean
  block: String
  building: String
  houseNumber: String
  streetAddress1: String
  streetAddress2: String
  streetAddress3: String
  townCity: String
  villageArea: String
  district: String
  provinceState: String
  country: String
  areaCode: String
  landMark: String
  pinCode: String
  addressType: AddressType
  referenceId: String!
}

input AddressRequestForCreate {
  flat: String
  floor: String
  defaultAddress: Boolean
  block: String
  building: String
  houseNumber: String
  streetAddress1: String
  streetAddress2: String
  streetAddress3: String
  townCity: String
  villageArea: String
  district: String
  provinceState: String
  country: String
  areaCode: String
  landMark: String
  pinCode: String
  addressType: AddressType
  referenceId: String!
}

input AddressRequestToGetCoordinates {
  flatHomeApartmentBuilding: String
  streetColonyName: String
  cityTownVillage: String
  pinCode: String
  stateID: ID!
  countryID: ID!
}

type AddressResponse {
  addressId: ID
  flat: String
  floor: String
  defaultAddress: Boolean
  block: String
  building: String
  houseNumber: String
  streetAddress1: String
  streetAddress2: String
  streetAddress3: String
  townCity: String
  villageArea: String
  district: String
  provinceState: String
  country: String
  areaCode: String
  landMark: String
  pinCode: String
  addressType: AddressType
  referenceId: ID
  createdAt: DateTime
  updatedAt: DateTime
  coordinateResponse: CoordinateResponse
}

enum AddressType {
  SHIPPING
  BILLING
  BUSINESS
  RETURN
  COLLECTION_POINT
  UNDEFINED
}

input BillingDetailsRequest {
  billingDetailsId: ID!
  buyerId: ID!
  firstName: String
  lastName: String
  companyName: String
  email: String
  phoneNumber: String
  billingAddress: AddressRequest
  taxCode: String
}

input BillingDetailsRequestForCreate {
  buyerId: ID!
  firstName: String
  lastName: String
  companyName: String
  email: String
  phoneNumber: String
  billingAddress: AddressRequestForCreate!
  taxCode: String
}

type BillingDetailsResponse {
  billingDetailsId: ID
  buyerId: ID
  firstName: String
  lastName: String
  companyName: String
  email: String
  phoneNumber: String
  billingAddress: AddressResponse
  taxCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum BusinessType {
  UNDEFINED
  BUSINESS_SELLER
  INDIVIDUAL_SELLER
}

input BuyerProfileRequest {
  buyerId: ID!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  oneClickPurchaseOn: Boolean
  geoLocation: String
  country: String
  languages: [String]
  currencies: [String]
  applicationSettings: String
  categoryPreferences: [String]
  productPreferences: [String]
  sellerPreferences: [String]
}

input BuyerProfileRequestForCreate {
  password: String
  firstName: String
  lastName: String
  email: String!
  phoneNumber: String!
  oneClickPurchaseOn: Boolean
  geoLocation: String
  country: String
  languages: [String]
  currencies: [String]
}

type BuyerProfileResponse {
  userId: ID
  buyerId: ID
  userName: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  userType: UserType
  createdAt: DateTime
  updatedAt: DateTime
  oneClickPurchaseOn: Boolean
  guestBuyer: Boolean
  geoLocation: String
  country: String
  languages: [String]
  currencies: [String]
  applicationSettings: String
  paymentOptions: [PaymentDetailResponse]
  notifications: [NotificationResponse]
  preferences: [PreferenceResponse]
  wishLists: [WishListResponse]
  shareInformations: [ShareInformationResponse]
  categoryPreferences: [String]
  productPreferences: [String]
  sellerPreferences: [String]
  billingDetails: BillingDetailsResponse
  refundSalamiCredit: Float
  bonusSalamiCredit: Float
  bonusSalamiCreditExpire: DateTime
  selectedCountry: CountryResponse
  selectedSupportedLanguage: SupportedLanguageResponse
  walletId: ID
}

input ChatMessageRequest {
  chatMessageId: ID!
  chatId: ID!
  postedBy: String
  msgText: String
}

input ChatMessageRequestForCreate {
  chatId: ID!
  postedBy: String
  msgText: String
}

type ChatMessageResponse {
  chatMessageId: ID
  chatId: ID
  postedBy: String
  msgText: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ChatRequest {
  chatId: ID!
  productListingId: ID!
  productName: String
  muteFlagForCustomer: Boolean
  chatStatus: ChatStatus
  chatOpenPeriodStartDate: DateTime
  chatOpenPeriodEndDate: DateTime
}

input ChatRequestForCreate {
  productListingId: ID!
  productName: String
  muteFlagForCustomer: Boolean
  chatStatus: ChatStatus
  chatOpenPeriodStartDate: DateTime
  chatOpenPeriodEndDate: DateTime
}

type ChatResponse {
  chatId: ID
  productListingId: ID
  productName: String
  muteFlagForCustomer: Boolean
  chatStatus: ChatStatus
  chatOpenPeriodStartDate: DateTime
  chatOpenPeriodEndDate: DateTime
  messages: [ChatMessageResponse]
  buyerProfiles: [BuyerProfileResponse]
  createdAt: DateTime
  updatedAt: DateTime
}

enum ChatStatus {
  OPEN
  SUSPENDED
  LOCKED
  CLOSED
  UNDEFINED
}

input ChatSubscriberRequest {
  buyerId: ID!
  chatId: ID!
}

input ChatSubscriberRequestForCreate {
  buyerId: ID!
  chatId: ID!
}

type ChatSubscriberResponse {
  buyerId: ID
  chatId: ID
  createdAt: DateTime
  updatedAt: DateTime
}

type CoordinateResponse {
  latitude: Float
  longitude: Float
}

type CountryResponse {
  id: ID
  countryName: String
}

type CountryStateResponse {
  id: ID
  stateName: String
  countryId: ID
}

scalar Date

scalar DateTime

type DeliveryAddressesByOnlineStoresResponse {
  addresses: [AddressResponse]
}

input DeliveryAddressGeoCoordinateRequest {
  addressId: ID!
  coordinates: PointRequest
}

input DeliveryAddressGeoCoordinateRequestForCreate {
  addressId: ID!
  coordinates: PointRequestForCreate
}

type DeliveryAddressGeoCoordinateResponse {
  addressId: ID!
  coordinates: PointResponse
  createdAt: DateTime
  updatedAt: DateTime
}

input DeliveryAddressToOnlineStoreRequest {
  addressId: ID!
  storeId: ID!
}

input DeliveryAddressToOnlineStoreRequestForCreate {
  addressId: ID!
  storeId: ID!
}

type DeliveryAddressToOnlineStoreResponse {
  addressId: ID!
  storeId: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

scalar FileUpload

type ForgotPasswordStep1Response {
  email: String
  phoneNumber: String
  message: String
}

type ForgotPasswordStep2Response {
  message: String
  actionToken: String
}

type ForgotPasswordStep3Response {
  message: String
}

type GenericResponse {
  status: Boolean
  message: String
}

type MicroHubResponse {
  microHubId: ID
  address: AddressResponse
  openingHours: [String]
  contactPerson: String
  contactNumber: String
}

type Mutation {
  registerGuestBuyerToBuyer(request: BuyerProfileRequest!): BuyerProfileResponse
  registerBuyer(request: BuyerProfileRequestForCreate!): BuyerProfileResponse
  deleteBuyerProfile(buyerId: ID!): Boolean
  updateBuyerProfile(request: BuyerProfileRequest!): BuyerProfileResponse
  createGuestBuyer: BuyerProfileResponse
  addRefundSalamiCredit(buyerId: ID!, refundAmount: Float!): Float
  useRefundSalamiCredit(buyerId: ID!, amount: Float!): Float
  addBonusSalamiCredit(buyerId: ID!, amount: Float!, bonusSalamiCreditExpire: DateTime): Float
  addProductRefundToWallet(buyerId: ID!, transactionReference: ID!, amount: Float!): SalamiWalletTransactionResponse
  refillSalamiCredit(amount: Float!, transactionReference: ID!): SalamiWalletTransactionResponse
  grantGiftPromotion(buyerId: ID!, amount: Float!, expiryDate: Date): SalamiWalletGiftTransactionResponse
  reduceOrderAmountFromWallet(amount: Float!, transactionReference: ID!): ReduceWalletResponse
  rateSeller(sellerId: ID!, rating: Float!, buyerId: ID!): Boolean
  changePassword(oldPassword: String!, newPassword: String!, userId: ID!): Boolean
  forgotPasswordStep1SendNotificationEmail(email: String!): ForgotPasswordStep1Response
  forgotPasswordStep1SendNotificationSms(sms: String!): ForgotPasswordStep1Response
  forgotPasswordStep2VerifyTokenEmail(email: String!, tokenCode: String): ForgotPasswordStep2Response
  forgotPasswordStep2VerifyTokenSms(sms: String!, tokenCode: String): ForgotPasswordStep2Response
  forgotPasswordStep3ChangeByEmail(actionTokenValue: String!, newPassword: String!, confirmPassword: String!): ForgotPasswordStep3Response
  forgotPasswordStep3ChangeBySms(actionTokenValue: String!, newPassword: String!, confirmPassword: String!): ForgotPasswordStep3Response
  registerSeller(request: SellerProfileRequestForCreate!): SellerProfileResponse
  deleteSellerProfile(sellerId: ID!): Boolean
  updateSellerProfile(request: SellerProfileRequest!): SellerProfileResponse
  createAddress(request: AddressRequestForCreate!): AddressResponse
  deleteAddress(addressId: ID!): Boolean
  updateAddress(request: AddressRequest!): AddressResponse
  createAddressForGuestBuyer(request: AddressRequestForCreate!): AddressResponse
  deleteAddressForGuestBuyer(addressId: ID!, guestBuyerId: ID!): Boolean
  updateAddressForGuestBuyer(request: AddressRequest!): AddressResponse
  createPaymentDetail(request: PaymentDetailRequestForCreate!): PaymentDetailResponse
  deletePaymentDetail(paymentDetailId: ID!): Boolean
  updatePaymentDetail(request: PaymentDetailRequest!): PaymentDetailResponse
  createNotification(request: NotificationRequestForCreate!): NotificationResponse
  deleteNotification(notificationId: ID!): Boolean
  updateNotification(request: NotificationRequest!): NotificationResponse
  createPreference(request: PreferenceRequestForCreate!): PreferenceResponse
  deletePreference(preferenceId: ID!): Boolean
  updatePreference(request: PreferenceRequest!): PreferenceResponse
  createShareInformation(request: ShareInformationRequestForCreate!): ShareInformationResponse
  deleteShareInformation(shareInformationId: ID!): Boolean
  updateShareInformation(request: ShareInformationRequest!): ShareInformationResponse
  createWishList(request: WishListRequestForCreate!): WishListResponse
  deleteWishList(wishListId: ID!): Boolean
  updateWishList(request: WishListRequest!): WishListResponse
  createBillingDetails(request: BillingDetailsRequestForCreate!): BillingDetailsResponse
  deleteBillingDetails(billingDetailsId: ID!): Boolean
  updateBillingDetails(request: BillingDetailsRequest!): BillingDetailsResponse
  createBillingDetailsForGuestBuyer(request: BillingDetailsRequestForCreate!): BillingDetailsResponse
  deleteBillingDetailsForGuestBuyer(billingDetailsId: ID!, guestBuyer: ID): Boolean
  updateBillingDetailsForGuestBuyer(request: BillingDetailsRequest!): BillingDetailsResponse
  createChat(request: ChatRequestForCreate!): ChatResponse
  deleteChat(chatId: ID!): Boolean
  updateChat(request: ChatRequest!): ChatResponse
  createChatMessage(request: ChatMessageRequestForCreate!): ChatMessageResponse
  deleteChatMessage(chatMessageId: ID!): Boolean
  updateChatMessage(request: ChatMessageRequest!): ChatMessageResponse
  createChatSubscriber(request: ChatSubscriberRequestForCreate!): ChatSubscriberResponse
  deleteChatSubscriber(buyerId: ID!, chatId: ID!): Boolean
  updateChatSubscriber(request: ChatSubscriberRequest!): ChatSubscriberResponse
  createDeliveryAddressGeoCoordinate(request: DeliveryAddressGeoCoordinateRequestForCreate!): DeliveryAddressGeoCoordinateResponse
  deleteDeliveryAddressGeoCoordinate(id: ID!): Boolean
  updateDeliveryAddressGeoCoordinate(request: DeliveryAddressGeoCoordinateRequest!): DeliveryAddressGeoCoordinateResponse
  createDeliveryAddressToOnlineStore(request: DeliveryAddressToOnlineStoreRequestForCreate!): DeliveryAddressToOnlineStoreResponse
  deleteDeliveryAddressToOnlineStore(addressId: ID!, storeId: ID!): Boolean
  updateDeliveryAddressToOnlineStore(request: DeliveryAddressToOnlineStoreRequest!): DeliveryAddressToOnlineStoreResponse
  createShippingDetail(request: ShippingDetailRequestForCreate!): ShippingDetailResponse
  deleteShippingDetail(shippingId: ID!): Boolean
  updateShippingDetail(request: ShippingDetailRequest!): ShippingDetailResponse
  createSellerToOnlineStore(request: SellerToOnlineStoreRequestForCreate!): SellerToOnlineStoreResponse
  deleteSellerToOnlineStore(sellerId: ID!, storeId: ID!): Boolean
  updateSellerToOnlineStore(request: SellerToOnlineStoreRequest!): SellerToOnlineStoreResponse
  setCountryForUser(userId: ID!, countryId: ID!): CountryResponse
  setSupportedLanguageForUser(userId: ID!, supportedLanguageId: ID!): SupportedLanguageResponse
  setWalletToBuyer(buyerId: ID!, walletId: ID!): BuyerProfileResponse
  setEscrowAccountToSeller(sellerId: ID, escrowAccountId: ID!): SellerProfileResponse
  createSellerContact(request: SellerContactRequestForCreate!): SellerContactResponse
  updateSellerContact(request: SellerContactRequest!): SellerContactResponse
  deleteSellerContact(contactId: ID!): Boolean
  sellerContactForSeller(sellerId: ID!): [SellerContactResponse]
  createSellerBillingDetails(request: SellerBillingDetailsRequestForCreate!): SellerBillingDetailsResponse
  updateSellerBillingDetails(request: SellerBillingDetailsRequest!): SellerBillingDetailsResponse
  deleteSellerBillingDetails(billingDetailsId: ID!): Boolean
  sellerBillingDetailsForSeller(sellerId: ID!): SellerBillingDetailsResponse
  acceptSellerRegistrationDocuments(sellerId: ID!): GenericResponse
  rejectSellerValidation(sellerId: ID!, rejectReason: RegistrationRejectedReason!, rejectNote: String): GenericResponse
  validateCode(request: ValidateCodeRequest!): ValidateCodeResponse
  sendOTPCode(sendCodeRequest: SendCodeRequest!): SendCodeResponse
}

input NotificationRequest {
  notificationId: ID!
  text: String
  notificationStatus: NotificationStatus
  buyerId: ID!
  dateTime: DateTime
}

input NotificationRequestForCreate {
  text: String
  notificationStatus: NotificationStatus
  buyerId: ID!
  dateTime: DateTime
}

type NotificationResponse {
  notificationId: ID
  text: String
  notificationStatus: NotificationStatus
  buyerId: ID
  dateTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum NotificationStatus {
  READ
  UNREAD
  UNDEFINED
}

type OneClickBuyResponse {
  defaultAddress: AddressResponse
  defaultPaymentMethod: PaymentDetailResponse
}

input PaymentDetailRequest {
  paymentDetailId: ID!
  buyerId: ID!
  paymentType: PaymentType
  isDefaultPaymentType: Boolean
}

input PaymentDetailRequestForCreate {
  buyerId: ID!
  paymentType: PaymentType
  isDefaultPaymentType: Boolean
}

type PaymentDetailResponse {
  paymentDetailId: ID
  buyerId: ID
  paymentType: PaymentType
  isDefaultPaymentType: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  CASH_AT_DELIVERY
  WIRE_TRANSFER
  SALAMI_CREDIT
  ESCROW
  PAYPAL
  UNDEFINED
}

input PointRequest {
  x: Float!
  y: Float!
}

input PointRequestForCreate {
  x: Float!
  y: Float!
}

type PointResponse {
  x: Float
  y: Float
}

input PreferenceRequest {
  preferenceId: ID!
  preferenceType: PreferenceType
  profileId: ID!
  referenceId: ID!
}

input PreferenceRequestForCreate {
  preferenceType: PreferenceType
  profileId: ID!
  referenceId: ID!
}

type PreferenceResponse {
  preferenceId: ID
  preferenceType: PreferenceType
  profileId: ID
  referenceId: ID
  createdAt: DateTime
  updatedAt: DateTime
}

enum PreferenceType {
  CATEGORY
  SELLER
  PRODUCT
  UNDEFINED
}

type Query {
  buyerProfiles: [BuyerProfileResponse]
  buyerProfile(buyerId: ID!): BuyerProfileResponse
  guestBuyerProfile(guestBuyerId: ID!): BuyerProfileResponse
  oneClickBuy(buyerId: ID!): OneClickBuyResponse
  buyerProfileByUserId(userProfileId: ID!): BuyerProfileResponse
  getRefundSalamiCredit(buyerId: ID!): Float
  getBuyerSalamiWalletBalance: SalamiWalletResponse
  sellerProfilesPaginated(pageable: SellerProfilePageable): SellerProfileResponsePaginated!
  sellerProfile(sellerId: ID!): SellerProfileResponse
  sellerProfileByUserId(userProfileId: ID!): SellerProfileResponse
  serviceOperatorProfileByUserId(userProfileId: ID!): ServiceOperatorResponse
  addresses: [AddressResponse]
  addressById(addressId: ID!): AddressResponse
  addressByIdForGuestBuyer(addressId: ID!, guestBuyerId: ID!): AddressResponse
  getSellerAddressesById(sellerId: ID!): [AddressResponse]
  getBuyerAddressesById(buyerId: ID!): [AddressResponse]
  getGuestBuyerAddressesById(buyerId: ID!): [AddressResponse]
  coordinatesForAddressRequest(address: AddressRequestToGetCoordinates!): CoordinateResponse
  coordinatesForAddressRequestFromAddressId(addressId: ID!): CoordinateResponse
  getGuestBuyerAddressByType(guestBuyerId: ID!, addressType: AddressType): [AddressResponse]
  getBuyerAddressByType(buyerId: ID!, addressType: AddressType): [AddressResponse]
  getSellerAddressByType(sellerId: ID!, addressType: AddressType): [AddressResponse]
  getMicroHubInformation: [MicroHubResponse]
  getSellerDefaultAddressBySellerId(sellerId: ID!): AddressResponse
  getBuyerDefaultAddressByBuyerId(buyerId: ID!): AddressResponse
  getGuestBuyerDefaultAddressByBuyerId(buyerId: ID!): AddressResponse
  paymentDetails: [PaymentDetailResponse]
  paymentDetailsByBuyerId(buyerId: ID!): [PaymentDetailResponse]
  paymentDetailById(paymentDetailId: ID!): PaymentDetailResponse
  defaultPaymentDetailByBuyerId(buyerId: ID!): PaymentDetailResponse
  preferences: [PreferenceResponse]
  preferenceById(preferenceId: ID!): PreferenceResponse
  shareInformations: [ShareInformationResponse]
  shareInformationById(shareInformationId: ID!): ShareInformationResponse
  wishLists: [WishListResponse]
  wishListById(wishListId: ID!): WishListResponse
  notifications: [NotificationResponse]
  notificationById(notificationId: ID!): NotificationResponse
  billingDetails: [BillingDetailsResponse]
  billingDetailsById(billingDetailsId: ID!): BillingDetailsResponse
  billingDetailsByBuyerId(buyerId: ID!): [BillingDetailsResponse]
  billingDetailsByGuestBuyerId(guestBuyerId: ID!): [BillingDetailsResponse]
  chats: [ChatResponse]
  chatById(chatId: ID!): ChatResponse
  chatMessages: [ChatMessageResponse]
  chatMessageById(chatMessageId: ID!): ChatMessageResponse
  chatSubscribers: [ChatSubscriberResponse]
  chatSubscriberById(buyerId: ID!, chatId: ID!): ChatSubscriberResponse
  deliveryAddressGeoCoordinates: [DeliveryAddressGeoCoordinateResponse]
  deliveryAddressGeoCoordinateById(addressId: ID!): DeliveryAddressGeoCoordinateResponse
  deliveryAddressToOnlineStores: [DeliveryAddressToOnlineStoreResponse]
  deliveryAddressToOnlineStoreById(addressId: ID!, storeId: ID!): DeliveryAddressToOnlineStoreResponse
  deliveryAddressesByOnlineStores(storeIds: [ID]): DeliveryAddressesByOnlineStoresResponse
  sellerToOnlineStores: [SellerToOnlineStoreResponse]
  sellerToOnlineStoreById(sellerId: ID!, storeId: ID!): SellerToOnlineStoreResponse
  onlineStoresForSeller(sellerId: ID!): [SellerToOnlineStoreResponse]
  shippingDetails: [ShippingDetailResponse]
  shippingDetailById(shippingId: ID!): ShippingDetailResponse
  userHasVerifiedEmail(userId: ID!): Boolean
  userHasVerifiedPhoneNumber(userId: ID!): Boolean
  buyerHasVerifiedPhoneNumber(userId: ID!): Boolean
  deliveryAddressForBuyer(buyerId: ID!): AddressResponse
  deliveryAddressForGuestBuyer(buyerId: ID!): AddressResponse
  getCountries: [CountryResponse]
  getSupportedLanguages: [SupportedLanguageResponse]
  getStatesByCountryId(countryId: ID!): [CountryStateResponse]
  sellerContacts: [SellerContactResponse]
  sellerContactById(contactId: ID!): SellerContactResponse
  sellerContactsBySeller(sellerId: ID!): [SellerContactResponse]
  sellerBillingDetails: [SellerBillingDetailsResponse]
  sellerBillingDetailsById(billingDetailsId: ID!): SellerBillingDetailsResponse
  sellerBillingDetailsForSeller(sellerId: ID!): SellerBillingDetailsResponse
  getSellerDocumentKeys(sellerId: ID!): [SellerDocumentResponse]
  getHowToVideoLink: GenericResponse
}

type ReduceWalletResponse {
  orderAmount: Float
  remainingOrderAmount: Float
  usedGiftAmount: Float
  usedWalletAmount: Float
}

enum RegistrationRejectedReason {
  UNDEFINED
  NO_NATIONAL_ID_CARD_SUPPLIED
  NO_TAX_NUMBER_CARD_SUPPLIED
  FALSE_INFORMATION
  OFFENSIVE_SHOP_OR_SELLER_NAME
}

type SalamiWalletGiftTransactionResponse {
  giftTransactionId: ID
  walletId: ID
  giftParentTransactionId: ID
  transactionAmount: Float
  transactionType: WalletTransactionType
  transactionReference: ID
  transactionTimestamp: DateTime
  giftExpiryDate: Date
}

type SalamiWalletResponse {
  walletId: ID
  buyerId: ID
  walletBalance: Float
  giftBalance: Float
}

type SalamiWalletTransactionResponse {
  transactionId: ID
  walletId: ID
  transactionAmount: Float
  transactionType: WalletTransactionType
  transactionReference: ID
  transactionTimestamp: DateTime
}

input SellerAddressRequestForCreate {
  townCity: String
  streetAddress1: String
  streetAddress2: String
  provinceState: String
  country: String
  areaCode: String
}

input SellerBillingDetailsRequest {
  billingDetailsId: ID!
  sellerId: ID!
  accountName: String
  bankName: String
  bankAddress: String
  internationalRoutingCode: String
  domesticRoutingCode: String
  accountNumber: String
  ifscCode: String
}

input SellerBillingDetailsRequestForCreate {
  sellerId: ID
  accountName: String
  bankName: String
  bankAddress: String
  internationalRoutingCode: String
  domesticRoutingCode: String
  accountNumber: String
  ifscCode: String
}

type SellerBillingDetailsResponse {
  billingDetailsId: ID
  sellerId: ID
  accountName: String
  bankName: String
  bankAddress: String
  internationalRoutingCode: String
  domesticRoutingCode: String
  accountNumber: String
  ifscCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SellerContactRequest {
  contactId: ID!
  sellerId: ID!
  contactName: String
  contactEmail: String
  contactPhoneNumber: String
  supportEmail: String
  supportPhoneNumber: String
}

input SellerContactRequestForCreate {
  sellerId: ID
  contactName: String
  contactEmail: String
  contactPhoneNumber: String
  supportEmail: String
  supportPhoneNumber: String
}

type SellerContactResponse {
  contactId: ID
  sellerId: ID
  contactName: String
  contactEmail: String
  contactPhoneNumber: String
  supportEmail: String
  supportPhoneNumber: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SellerDocumentResponse {
  documentKey: String
}

input SellerProfilePageable {
  sellerValidationStatus: SellerValidationStatus
  page: Int
  size: Int
}

input SellerProfileRequest {
  sellerId: ID!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  businessName: String
  geoLocation: String
  brandName: String
  biography: String
  govCompanyId: String
  vstGstNumber: String
  sellerType: SellerType
  avatarUrl: String
  shortName: String
  middleName: String
  vatCode: String
  sellerName: String
  nationalIdNumber: String
  nationalIdNumberValidated: Boolean
  taxNumber: String
  taxNumberValidated: Boolean
  vatCodeValidated: Boolean
  commChamberRegNum: String
  commChamberRegNumValidated: Boolean
  businessType: BusinessType
  storeName: String
  productsUpcAvailable: Boolean
  manufacturerBrandOwner: Boolean
  registeredTrademarksOwner: Boolean
  storeShortName: String
}

input SellerProfileRequestForCreate {
  password: String!
  firstName: String
  lastName: String
  email: String!
  phoneNumber: String
  businessName: String
  geoLocation: String
  brandName: String
  biography: String
  govCompanyId: String
  vstGstNumber: String
  sellerType: SellerType
  avatarUrl: String
  shortName: String
  middleName: String
  vatCode: String
  storeName: String
  sellerContact: SellerContactRequestForCreate
  sellerBillingDetails: SellerBillingDetailsRequestForCreate
  sellerAddress: SellerAddressRequestForCreate!
  sellerName: String
  nationalIdNumber: String
  nationalIdNumberValidated: Boolean
  taxNumber: String
  taxNumberValidated: Boolean
  vatCodeValidated: Boolean
  commChamberRegNum: String
  commChamberRegNumValidated: Boolean
  businessType: BusinessType!
  productsUpcAvailable: Boolean!
  manufacturerBrandOwner: Boolean!
  registeredTrademarksOwner: Boolean!
  aadharCardDocument: FileUpload
  panCardDocument: FileUpload
  vatNumberDocument: FileUpload
  gstinNumberDocument: FileUpload
  storeShortName: String
}

type SellerProfileResponse {
  userId: ID
  sellerId: ID
  userName: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  userType: UserType
  createdAt: DateTime
  updatedAt: DateTime
  businessName: String
  geoLocation: String
  brandName: String
  biography: String
  govCompanyId: String
  vstGstNumber: String
  usersRating: String
  sellerType: SellerType
  selectedCountry: CountryResponse
  selectedSupportedLanguage: SupportedLanguageResponse
  escrowAccountId: ID
  avatarUrl: String
  shortName: String
  vatCode: String
  sellerBillingDetails: SellerBillingDetailsResponse
  sellerContacts: [SellerContactResponse]
  middleName: String
  businessType: BusinessType
  sellerValidationStatus: SellerValidationStatus
  storeName: String
  productsUpcAvailable: Boolean
  manufacturerBrandOwner: Boolean
  registeredTrademarksOwner: Boolean
  sellerName: String
  nationalIdNumber: String
  nationalIdNumberValidated: Boolean
  taxNumber: String
  taxNumberValidated: Boolean
  vatCodeValidated: Boolean
  commChamberRegNum: String
  commChamberRegNumValidated: Boolean
  storeShortName: String
  registrationRejectedNotes: String
  registrationRejectedReason: RegistrationRejectedReason
  validationStatusChangedBy: ID
}

type SellerProfileResponsePaginated {
  content: [SellerProfileResponse!]!
  pageNo: Int!
  pageSize: Int!
  totalPages: Int!
  totalElements: Int!
}

input SellerToOnlineStoreRequest {
  sellerId: ID!
  storeId: ID!
}

input SellerToOnlineStoreRequestForCreate {
  sellerId: ID!
  storeId: ID!
}

type SellerToOnlineStoreResponse {
  sellerId: ID!
  storeId: ID!
  createdAt: DateTime
  updatedAt: DateTime
}

enum SellerType {
  UNDEFINED
  MAIN_SELLER
  ANNOUNCEMENT_SELLER
}

enum SellerValidationStatus {
  UNDEFINED
  PENDING
  ACCEPTED
  REJECTED
}

input SendCodeRequest {
  userId: ID!
  validationType: ValidationType!
}

type SendCodeResponse {
  status: Boolean
  message: String
}

type ServiceOperatorResponse {
  serviceOperatorId: ID
  userProfileResponse: UserProfileResponse
}

enum ShareChannel {
  UNDEFINED
  FACEBOOK
  WHATSAPP
  GOOGLE
  TWITTER
  PLAIN_LINK
  QRCODE
}

input ShareInformationRequest {
  shareInformationId: ID!
  targetEmailAddress: String
  shareMessage: String
  buyerId: ID!
  productId: ID!
  hashtags: [String]
  shareTitle: String
  productPageUrl: String
  shareChannel: ShareChannel
}

input ShareInformationRequestForCreate {
  targetEmailAddress: String
  shareMessage: String
  buyerId: ID!
  productId: ID!
  hashtags: [String]
  shareTitle: String
  productPageUrl: String
  shareChannel: ShareChannel
}

type ShareInformationResponse {
  shareInformationId: ID
  targetEmailAddress: String
  shareMessage: String
  buyerId: ID
  productId: ID
  hashtags: [String]
  shareTitle: String
  productPageUrl: String
  shareChannel: ShareChannel
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingDetailRequest {
  shippingId: ID!
  orderId: ID!
  shippingAddressId: ID!
  orderItemId: ID!
  carrier: String
  carrierUrl: String
  trackingNum: String
  deliveryDate: DateTime
  shippingInstructions: String
  shippingStatus: ShippingStatus
  shippingMethod: ShippingMethod
  failedDeliveryReason: String
  shippingDate: DateTime
  expectedDeliveryDate: DateTime
}

input ShippingDetailRequestForCreate {
  orderId: ID!
  shippingAddressId: ID!
  orderItemId: ID!
  carrier: String
  carrierUrl: String
  trackingNum: String
  deliveryDate: DateTime
  shippingInstructions: String
  shippingStatus: ShippingStatus
  shippingMethod: ShippingMethod
  failedDeliveryReason: String
  shippingDate: DateTime
  expectedDeliveryDate: DateTime
}

type ShippingDetailResponse {
  shippingId: ID
  orderId: ID
  orderItemId: ID
  shippingAddressId: ID
  carrier: String
  carrierUrl: String
  trackingNum: String
  deliveryDate: DateTime
  shippingInstructions: String
  shippingStatus: ShippingStatus
  shippingMethod: ShippingMethod
  failedDeliveryReason: String
  shippingDate: DateTime
  expectedDeliveryDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum ShippingMethod {
  UNDEFINED
  DELIVERY_ADDRESS
  COLLECTION_POINT
}

enum ShippingStatus {
  UNDEFINED
  WAITING_FOR_SHIPPING
  SHIPPED
  ON_ROUTE
  OUT_FOR_DELIVERY
  DELIVERED
  DELIVERY_FAILED
}

type SupportedLanguageResponse {
  id: ID
  language: String
}

type UserProfileResponse {
  userId: ID
  userName: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  userType: UserType
  createdAt: DateTime
  updatedAt: DateTime
  middleName: String
  geoLocation: String
  selectedCountry: CountryResponse
  selectedSupportedLanguage: SupportedLanguageResponse
}

enum UserType {
  UNDEFINED
  ADMIN
  BUYER
  GUEST_BUYER
  SELLER
  COMPANY_BUYER
  SOP1
  SOP2
  SOP3
  SOP4
  SOP5
  SOP6
  SOP7
}

input ValidateCodeRequest {
  userId: ID!
  validationType: ValidationType!
  code: String!
}

type ValidateCodeResponse {
  status: Boolean
  message: String
}

enum ValidationType {
  SMS
  EMAIL
}

enum WalletTransactionType {
  UNDEFINED
  GIFT_PROMOTION_GRANTED
  GIFT_PROMOTION_USED
  GIFT_PROMOTION_EXPIRED
  PRODUCT_REFUND
  SALAMI_CREDITS_REFILL
  PRODUCT_PURCHASE
  MONTHLY_AGGREGATE
}

input WishListRequest {
  wishListId: ID!
  profileId: ID!
  productId: ID!
  addedDateTime: DateTime
}

input WishListRequestForCreate {
  profileId: ID!
  productId: ID!
  addedDateTime: DateTime
}

type WishListResponse {
  wishListId: ID
  profileId: ID
  productId: ID
  addedDateTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

